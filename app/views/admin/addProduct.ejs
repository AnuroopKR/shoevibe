<%-include("../layoutAdmin/header.ejs")%>
<link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">

<style>
    .image-box {
        margin: 10px;
        display: inline-block;
    }

    .img-fluid {
        max-width: 100%;
        max-height:auto;
    }

    .delete-button {
        display: block;
        margin-top: 5px;
        margin-right: 5px;
        width: 50%;
        background-color: aqua;
        border: 0;
    }
    .alline-btn{
        display:flex
    }
</style>

<section class="content-main">
    <form action=""  enctype="multipart/form-data" onsubmit="return validateForm()" id="myForm">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
               
            </div>
        </div>
        <div class="col-lg-6">
            
            <div class="card mb-4">
                <div class="card-body">
                    <div class="mb-4">
                        <label for="product_title" class="form-label">Product title</label>
                        <input type="text" placeholder="Type here" class="form-control" id="product_title" name="productName" onkeypress="checkEnter(event, 'product_quantity')"/>
                        <p id="productNameError" style="color: red;"></p>
                    </div>
                    <div class="row gx-3">
                        <div class="col-md-4 mb-3">
                            <label for="product_quantity" class="form-label">Quantity</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_quantity" name="quantity"onkeypress="checkEnter(event, 'product_color')"/>
                            <p id="productQuantityError" style="color: red;"></p>
                            
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="product_color" class="form-label">Colour</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_color" name="colour" onkeypress="checkEnter(event, 'product_size')"/>
                            <p id="productColorError" style="color: red;"></p>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="product_size" class="form-label">Size</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_size" name="size" onkeypress="checkEnter(event, 'product_brand')"/>
                            <p id="productSizeError" style="color: red;"></p>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="product_brand" class="form-label">Brand</label>
                        <input type="text" placeholder="Type here" class="form-control" id="product_brand" name="brand"  onkeypress="checkEnter(event, 'description')"/>
                        <p id="productBrandError" style="color: red;"></p>
                    </div>
                </div>
            </div>
            <!-- card end// -->
            <div class="card mb-4">
                <div class="card-body">
                    <div>
                        <label class="form-label">Description</label>
                        <textarea placeholder="Type here" class="form-control" rows="4" name="description" id="description" onkeypress="checkEnter(event, 'price')"></textarea>
                        <p id="discriptionError" style="color: red;"></p>
                    </div>
                </div>
            </div>
        
            <!-- card end// -->
            <div class="card mb-4">
                <div class="card-body">
                    <div>
                        <label class="form-label">Images</label>
                        <input class="form-control" type="file"  name="image" id="images" multiple onchange="handleImage()" />
                    </div>
                </div>
            </div>
            <!-- card end// -->
        </div>
        <div class="col-lg-3">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="mb-4">
                        <label class="form-label">Price</label>
                        <input type="text" placeholder="Type here" class="form-control" name="price" id="price" onkeypress="checkEnter(event, 'offer')"/>
                        <p id="priceError" style="color: red;"></p>
                    </div>
                   
                    <div class="mb-4">
                        <label class="form-label">Status</label>
                        <select class="form-select">
                            <option>Listed</option>
                            <option>Unlisted</option>
                        </select>
                    
                    <h5 class="mb-3">Categories</h5>
                    <% category.forEach(cat => { %>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" value="<%= cat._id %>" id="product-cat-<%= cat._id %>" name="category"/>
                            <label class="form-check-label" for=product-cat-<%= cat._id %>"> <%= cat.name %> </label>
                        </div>
                    <% }) %>
                </div>
            </div>
            
            <!-- card end// -->
        </div>
        <div class="card-body">
            <div class="col-lg-6 ps-5">
                <div  id="cropped-images" class="row">hai</div>
            </div>
        </div>
    </div>
    <div class="col-3 ">
        <div id="imagePreviewContainer" >
        </div>
    <div class="card-body col-lg-6">
        <button type="button" id="crop-button" class="btn btn-md rounded font-sm hover-up" disabled> Crop Images</button>
    </div>
</div>
</div>

    <div class="col-9">
    <div style="text-align: end; justify-content: right;">
        <!-- <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button> -->
        <button class="btn btn-md rounded font-sm hover-up" type="button" onclick="addProduct()" id="submit">Publish</button>
    </div>
</div>
</form>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>



<script>




var croppedImages=[] 
let croppedDataArray = [];
async function handleImage() {
    console.log(11111);
    var input = document.getElementById('images');
    var realTimePreviewContainer = document.getElementById('imagePreviewContainer');
    var selectedImages = []; 
    var croppedImages = [];
    let croppers = [];
    
    let croppedImagesContainer = document.getElementById("cropped-images");

    for (var i = 0; i < input.files.length; i++) {
        var reader = new FileReader();

        reader.onload = (function (index) {
            return function (e) {
                var div = document.createElement('div');
                div.className = 'image-box';

                var img = document.createElement('img');
                img.src = e.target.result;
                img.className = 'img-fluid';
                div.appendChild(img);
                
                selectedImages.push(img.src);
                croppedImages.push(img.src);

                // Create delete button
                var deleteButton = document.createElement('button');
                deleteButton.className = 'delete-button';
                deleteButton.innerHTML = 'Delete';

                deleteButton.onclick = function () {
                    var deletedSrc = img.src;
                    var index = selectedImages.indexOf(deletedSrc);
                    
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                        croppedImages.splice(index,1)
                    }
                    
                    div.remove(); 
                };

                div.appendChild(deleteButton);

                var imageToCrop = div.querySelector('img');
var cropper = new Cropper(imageToCrop, {
    aspectRatio: 800 / 800,
    crop: function(event) {
        // Increase the resolution of the cropped image by scaling up the crop box
        var scaleX = event.detail.width / 800; // 800 is the desired width
        var scaleY = event.detail.height / 800; // 800 is the desired height

        // Apply the scaling to the crop box
        cropper.setCropBoxData({
            width: event.detail.width / scaleX,
            height: event.detail.height / scaleY
        });
    }
});


                croppers.push(cropper);
                realTimePreviewContainer.appendChild(div);
            };
        })(i);

        reader.readAsDataURL(input.files[i]);
    }

    let cropButton = document.getElementById("crop-button");
    cropButton.disabled = false;

    cropButton.addEventListener("click", async () => {
        croppedImagesContainer.innerHTML = '';
        croppedDataArray = [];

        for (let cropper of croppers) {
            let croppedCanvas = cropper.getCroppedCanvas();

            if (croppedCanvas) {
                let blob = await new Promise((resolve) => {
                    croppedCanvas.toBlob((blob) => {
                        resolve(blob);
                    });
                });

                croppedDataArray.push(blob);

                let img = document.createElement("img");
img.src = URL.createObjectURL(blob);
img.style.width = "100%"; // Set the width of the image to 100% of its container's width
img.style.height = "auto"; // Maintain the aspect ratio by setting height to auto

let previewCroppedImage = document.createElement("div");
previewCroppedImage.classList.add("col-lg-6");
previewCroppedImage.appendChild(img);


                croppedImagesContainer.appendChild(previewCroppedImage);
            } else {
                console.error("Cropped canvas is null or empty.");
            }
        }

        console.log("Cropped images:", croppedDataArray);
    });
}




function addProduct() {
    event.preventDefault()
    const form = document.getElementById('myForm');
    const responseMessage = document.getElementById('responseMessage');


    
        let formData = new FormData();
        formData.append("productName", document.getElementById("product_title").value);
        formData.append("quantity", document.getElementById("product_quantity").value);
        formData.append("colour", document.getElementById("product_color").value);
        formData.append("size", document.getElementById("product_size").value);
        formData.append("brand", document.getElementById("product_brand").value);
        formData.append("description", document.getElementById("description").value);
        formData.append("price", document.getElementById("price").value);
        var selectedCategoryId = document.querySelector('input[name="category"]:checked').value;
        formData.append("category", selectedCategoryId);

        // Check if any required fields are empty

        

       
    
        for (let i = 0; i < croppedDataArray.length; i++) {
        formData.append(`image`, croppedDataArray[i], `croppedImage_${i}.png`);
    }
    
        console.log(formData);
    
    
if(validateForm()){
        fetch('/admin/addProduct', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log(data);
            window.location.reload() 
            // responseMessage.textContent = 'Form submitted successfully!';
        })
        .catch(error => {
            console.error('There was a problem with your fetch operation:', error);
            responseMessage.textContent = 'Error submitting form. Please try again later.';
        });
}
};


    function validateForm() {
        // Reset previous error messages
        document.getElementById('productNameError').textContent = '';
        document.getElementById('productQuantityError').textContent = '';
        document.getElementById('productColorError').textContent = '';
        document.getElementById('productSizeError').textContent = '';
        document.getElementById('productBrandError').textContent = '';
        document.getElementById('discriptionError').textContent = '';
        document.getElementById('priceError').textContent = '';

        // Get form input values
        const productName = document.getElementById('product_title').value.trim();
        const productQuantity = document.getElementById('product_quantity').value.trim();
        const productColor = document.getElementById('product_color').value.trim();
        const productSize = document.getElementById('product_size').value.trim();
        const productBrand = document.getElementById('product_brand').value.trim();
        const description = document.getElementById('description').value.trim();
        const price = document.getElementById('price').value.trim();

        // Validate each input field
        if (!validateInput(productName, 'Product name', 'productNameError', 'product_title')) return false;
        if (!validateQuantity(productQuantity, 'Product quantyty', 'productQuantityError', 'product_quantity')) return false;
        if (!validateInput(productColor, 'Color', 'productColorError', 'product_color')) return false;
        if (!validateProductSize(productSize, 'Product Size', 'productSizeError', 'product_size')) return false;
        if (!validateInput(productBrand, 'Brand', 'productBrandError', 'product_brand')) return false;
        if (!validateInput(description, 'Description', 'discriptionError', 'description')) return false;
        if (!validatePrice(price, 'Price', 'priceError', 'price')) return false;

        // Additional validation logic can be added as needed

        // If all validations pass, return true
        return true;
    }

    function validateInput(value, fieldName, errorId, inputId) {
        if (!value) {
            document.getElementById(errorId).textContent = `${fieldName} is required.`;
            document.getElementById(inputId).focus();
            return false;
        }

        // Validation for not consisting only of spaces
        if (/^\s+$/.test(value)) {
            document.getElementById(errorId).textContent = `${fieldName} cannot consist only of spaces.`;
            document.getElementById(inputId).focus();
            return false;
        }
        if (/\s{2,}/.test(value)) {
            document.getElementById(errorId).textContent = `Only one space is allowed between words for ${fieldName}.`;
            document.getElementById(inputId).focus();
            return false;
        }

        return true;
    }

    function validateProductSize(value, fieldName, errorId, inputId) {
        // Validation for a 1 or 2-digit number
        const isNonNegativeInteger = /^\d{1,2}$/.test(value) && parseInt(value, 10) >= 0;

        if (!isNonNegativeInteger) {
            document.getElementById(errorId).textContent = `${fieldName} must be a non-negative 1 or 2-digit number.`;
            document.getElementById(inputId).focus();
            return false;
        }
        return true;
    }
    function validatePrice(value, fieldName, errorId, inputId) {
        // Validation for a positive number with a maximum of 5 digits
        const isPositiveNumber = /^\d{1,5}$/.test(value) && parseInt(value, 10) > 0;

        if (!isPositiveNumber) {
            document.getElementById(errorId).textContent = `${fieldName} must be a positive number with a maximum of 5 digits.`;
            document.getElementById(inputId).focus();
            return false;
        }

        return true;
    }
        function validateQuantity(value, fieldName, errorId, inputId) {
        // Validation for a positive number with a maximum of 5 digits
        const isPositiveNumber = /^\d{1,3}$/.test(value) && parseInt(value, 10) > 0;

        if (!isPositiveNumber) {
            document.getElementById(errorId).textContent = `${fieldName} must be a positive number with a maximum of 3 digits.`;
            document.getElementById(inputId).focus();
            return false;
        }

        return true;
    }
    function validateOffer(offer, price, fieldName, errorId, inputId) {

        const isPositiveNumber = /^\d{1,5}$/.test(offer) && parseInt(offer, 10) > 0;

if (!isPositiveNumber) {
    document.getElementById(errorId).textContent = `${fieldName} must be a positive number with a maximum of 5 digits.`;
    document.getElementById(inputId).focus();
    return false;
}


    // Validation for offer less than price
    const offerValue = parseFloat(offer);
    const priceValue = parseFloat(price);

    if (isNaN(offerValue) || isNaN(priceValue) || offerValue >= priceValue) {
        document.getElementById(errorId).textContent = `${fieldName} must be a valid positive number and less than the price.`;
        document.getElementById(inputId).focus();
        return false;
    }

    return true;
}

function checkEnter(event, nextInputId) {
    if (event.key === 'Enter') {
        event.preventDefault();
        validateForm();
        const nextInput = document.getElementById(nextInputId);
        if (nextInput) {
            nextInput.focus();
        } else {
            console.error(`Next input with ID ${nextInputId} not found.`);
        }
    }
}






</script>


<!-- ============================================================================= -->
<%-include("../layoutAdmin/footer.ejs")%>